@page "/PersonalPage"
@using Tier_1.Models.Client
@using Tier_1.Models.Burial
@using Tier_1.Authentication
@using Tier_1.Data.BurialService
@inject NavigationManager NavigationManager
@inject IBurialService BurialService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <div class="container-fluid">
            <div class="row" id="rowMain">
                <div class="col-3" id="personalPage">
                    <h3>@String.Concat("@")@_client.Username</h3>
                </div>
            </div>
            @foreach (var variable in _burials)
            {
                <div class="burialForm">
                <div class="row">
                    <div class="col-2">
                        @String.Concat("@")@variable.ClientId
                        <button class="burialButtons" id="background" @onclick="@(() => DeleteBurial(variable.Id))">
                            <i class="oi oi-trash" style="color: #555555"></i>
                        </button>
                    </div>
                    <div class="col-2 ml-auto">

                        <button id="personalBtn" @onclick="@(() => ClickButton(@variable.Id))">Edit burial ...</button>

                        <div id="@variable.Id" class="modal">

                            <div class="modal-content">
                                <span class="close" @onclick="@(() => ClickSpan(@variable.Id))">&times;</span>
                                <input id="burialComments" type="text" placeholder="RIP ..." @bind-value="@variable.Comments">
                                <button type="button" @onclick="@(() => EditBurial(@variable.Comments, @variable.Id))" class="loginButtons">Edit</button>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="row" id="comments">
                    <div class="col-12" style="text-align: justify">
                        <p>@variable.Comments</p>
                    </div>
                </div>
                    <div class="row" id="seeComments">
                        <div class="col-4">
                            <a href="" @onclick="@(() => GoToBurial(variable.Id))">See comments</a>
                        </div>
                    </div>
                    </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private Client _client = new Client();
    private IList<Burial> _burials = new List<Burial>();
    
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string ClientId { get; set; }
    
    private string _editContent = "";

    protected override async Task OnInitializedAsync()
    {
        _client = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        ClientId = String.Concat(_client.Id);

        Console.WriteLine(_client.Username);
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _client = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        }
    }

    private void GoToBurial(int burialId)
    {
        Id = String.Concat(burialId);
        NavigationManager.NavigateTo("/BurialPage/" + Id);
    }

    private async Task DeleteBurial(int burialId)
    {
        await BurialService.DeleteBurial(burialId);
        foreach (var VARIABLE in _burials)
        {
            _burials.Remove(VARIABLE);
            break;
        }
    }

    private async Task EditBurial(string content, int id)
    {
        Burial burial = new Burial();
        foreach (var VARIABLE in _burials)
        {
            if (VARIABLE.ClientId == id)
            {
                burial = VARIABLE;
                break;
            }
        }
        burial.Comments = content;
        await BurialService.EditBurial(burial);
        _editContent = "";
    }
    
    private async Task ClickButton(int id)
    {
        await JsRuntime.InvokeVoidAsync("clickButton", String.Concat(id));
    }

    private async Task ClickSpan(int id)
    {
        await JsRuntime.InvokeVoidAsync("clickSpan", String.Concat(id));
    }
}