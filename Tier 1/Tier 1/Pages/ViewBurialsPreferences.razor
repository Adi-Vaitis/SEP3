@page "/ViewBurialsPreferences"
@using Tier_1.Data.BurialService
@using Tier_1.Data.PreferenceService
@using Tier_1.Models.Burial
@using Tier_1.Models.Client
@using Tier_1.Models.Preference
@using Tier_1.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IBurialService BurialService
@inject IPreferenceService PreferencesService
@inject IJSRuntime JsRuntime

@if (_burials == null)
{
    <p>
        <em>Loading ...</em>
    </p>
}
else if (!_burials.Any())
{
    <p>
        <em>No burials in the list.</em>
    </p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <table class="table styledTable">
                    <thead>
                    <tr>
                        <th>Burial</th>
                        <th>Preference Description</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in _preferencesToShow)
                    {
                        <tr>
                            <td>@item.BurialId</td>
                            <td>@item.Description</td>
                        </tr>
                    }
                    </tbody>
                </table>

            </div>
        </div>
    </div>
}
}


@code {
    private Client client;
    private IList<Preference> _preferences;
    private IList<Preference> _preferencesToShow;
    private IList<Burial> _burials = new List<Burial>();

    protected override async Task OnInitializedAsync()
    {
        client = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        _preferences = new List<Preference>();
        _preferencesToShow = new List<Preference>();

        Client employeeAccount = new Client();
        employeeAccount = await ClientService.GetClientByUsername("ADMIN");
        _burials = await BurialService.GetBurialsAsync(employeeAccount.Id);
        _preferences = await PreferencesService.GetPreferencesAsync();

        _preferencesToShow = _preferences;
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            client = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).CachedUser;
        }
    }
}